/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiStudentsCreateStudentPost } from '../fn/students/api-students-create-student-post';
import { ApiStudentsCreateStudentPost$Params } from '../fn/students/api-students-create-student-post';
import { apiStudentsCreateStudentPost$Plain } from '../fn/students/api-students-create-student-post-plain';
import { ApiStudentsCreateStudentPost$Plain$Params } from '../fn/students/api-students-create-student-post-plain';
import { apiStudentsGetStudentGet } from '../fn/students/api-students-get-student-get';
import { ApiStudentsGetStudentGet$Params } from '../fn/students/api-students-get-student-get';
import { apiStudentsGetStudentGet$Plain } from '../fn/students/api-students-get-student-get-plain';
import { ApiStudentsGetStudentGet$Plain$Params } from '../fn/students/api-students-get-student-get-plain';
import { apiStudentsGetStudentsGet } from '../fn/students/api-students-get-students-get';
import { ApiStudentsGetStudentsGet$Params } from '../fn/students/api-students-get-students-get';
import { apiStudentsGetStudentsGet$Plain } from '../fn/students/api-students-get-students-get-plain';
import { ApiStudentsGetStudentsGet$Plain$Params } from '../fn/students/api-students-get-students-get-plain';
import { apiStudentsImportStudentsPost } from '../fn/students/api-students-import-students-post';
import { ApiStudentsImportStudentsPost$Params } from '../fn/students/api-students-import-students-post';
import { apiStudentsImportStudentsPost$Plain } from '../fn/students/api-students-import-students-post-plain';
import { ApiStudentsImportStudentsPost$Plain$Params } from '../fn/students/api-students-import-students-post-plain';
import { CreateStudentResponse as EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse } from '../models/Education/Application/UseCases/Students/CreateStudentCommand/create-student-response';
import { CreateStudentsResponse as EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse } from '../models/Education/Application/UseCases/Students/CreateStudentsCommand/create-students-response';
import { GetStudentResponse as EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse } from '../models/Education/Application/UseCases/Students/GetStudentQuery/get-student-response';
import { GetStudentsResponse as EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse } from '../models/Education/Application/UseCases/Students/GetStudentsQuery/get-students-response';

@Injectable({ providedIn: 'root' })
export class StudentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiStudentsCreateStudentPost()` */
  static readonly ApiStudentsCreateStudentPostPath = '/api/Students/CreateStudent';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsCreateStudentPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiStudentsCreateStudentPost$Plain$Response(params?: ApiStudentsCreateStudentPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse>> {
    return apiStudentsCreateStudentPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsCreateStudentPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiStudentsCreateStudentPost$Plain(params?: ApiStudentsCreateStudentPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse> {
    return this.apiStudentsCreateStudentPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse>): EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsCreateStudentPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiStudentsCreateStudentPost$Response(params?: ApiStudentsCreateStudentPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse>> {
    return apiStudentsCreateStudentPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsCreateStudentPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiStudentsCreateStudentPost(params?: ApiStudentsCreateStudentPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse> {
    return this.apiStudentsCreateStudentPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse>): EducationApplicationUseCasesStudentsCreateStudentCommandCreateStudentResponse => r.body)
    );
  }

  /** Path part for operation `apiStudentsImportStudentsPost()` */
  static readonly ApiStudentsImportStudentsPostPath = '/api/Students/ImportStudents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsImportStudentsPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiStudentsImportStudentsPost$Plain$Response(params?: ApiStudentsImportStudentsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse>> {
    return apiStudentsImportStudentsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsImportStudentsPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiStudentsImportStudentsPost$Plain(params?: ApiStudentsImportStudentsPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse> {
    return this.apiStudentsImportStudentsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse>): EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsImportStudentsPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiStudentsImportStudentsPost$Response(params?: ApiStudentsImportStudentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse>> {
    return apiStudentsImportStudentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsImportStudentsPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiStudentsImportStudentsPost(params?: ApiStudentsImportStudentsPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse> {
    return this.apiStudentsImportStudentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse>): EducationApplicationUseCasesStudentsCreateStudentsCommandCreateStudentsResponse => r.body)
    );
  }

  /** Path part for operation `apiStudentsGetStudentsGet()` */
  static readonly ApiStudentsGetStudentsGetPath = '/api/Students/GetStudents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsGetStudentsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentsGet$Plain$Response(params?: ApiStudentsGetStudentsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse>> {
    return apiStudentsGetStudentsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsGetStudentsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentsGet$Plain(params?: ApiStudentsGetStudentsGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse> {
    return this.apiStudentsGetStudentsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse>): EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsGetStudentsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentsGet$Response(params?: ApiStudentsGetStudentsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse>> {
    return apiStudentsGetStudentsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsGetStudentsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentsGet(params?: ApiStudentsGetStudentsGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse> {
    return this.apiStudentsGetStudentsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse>): EducationApplicationUseCasesStudentsGetStudentsQueryGetStudentsResponse => r.body)
    );
  }

  /** Path part for operation `apiStudentsGetStudentGet()` */
  static readonly ApiStudentsGetStudentGetPath = '/api/Students/GetStudent';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsGetStudentGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentGet$Plain$Response(params: ApiStudentsGetStudentGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse>> {
    return apiStudentsGetStudentGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsGetStudentGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentGet$Plain(params: ApiStudentsGetStudentGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse> {
    return this.apiStudentsGetStudentGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse>): EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiStudentsGetStudentGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentGet$Response(params: ApiStudentsGetStudentGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse>> {
    return apiStudentsGetStudentGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiStudentsGetStudentGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiStudentsGetStudentGet(params: ApiStudentsGetStudentGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse> {
    return this.apiStudentsGetStudentGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse>): EducationApplicationUseCasesStudentsGetStudentQueryGetStudentResponse => r.body)
    );
  }

}
