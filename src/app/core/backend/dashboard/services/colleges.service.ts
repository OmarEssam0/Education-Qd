/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCollegesCreateCollegePost } from '../fn/colleges/api-colleges-create-college-post';
import { ApiCollegesCreateCollegePost$Params } from '../fn/colleges/api-colleges-create-college-post';
import { apiCollegesCreateCollegePost$Plain } from '../fn/colleges/api-colleges-create-college-post-plain';
import { ApiCollegesCreateCollegePost$Plain$Params } from '../fn/colleges/api-colleges-create-college-post-plain';
import { apiCollegesGetCollegeGet } from '../fn/colleges/api-colleges-get-college-get';
import { ApiCollegesGetCollegeGet$Params } from '../fn/colleges/api-colleges-get-college-get';
import { apiCollegesGetCollegeGet$Plain } from '../fn/colleges/api-colleges-get-college-get-plain';
import { ApiCollegesGetCollegeGet$Plain$Params } from '../fn/colleges/api-colleges-get-college-get-plain';
import { apiCollegesGetCollegesGet } from '../fn/colleges/api-colleges-get-colleges-get';
import { ApiCollegesGetCollegesGet$Params } from '../fn/colleges/api-colleges-get-colleges-get';
import { apiCollegesGetCollegesGet$Plain } from '../fn/colleges/api-colleges-get-colleges-get-plain';
import { ApiCollegesGetCollegesGet$Plain$Params } from '../fn/colleges/api-colleges-get-colleges-get-plain';
import { apiCollegesGetOwnCollegeGet } from '../fn/colleges/api-colleges-get-own-college-get';
import { ApiCollegesGetOwnCollegeGet$Params } from '../fn/colleges/api-colleges-get-own-college-get';
import { apiCollegesGetOwnCollegeGet$Plain } from '../fn/colleges/api-colleges-get-own-college-get-plain';
import { ApiCollegesGetOwnCollegeGet$Plain$Params } from '../fn/colleges/api-colleges-get-own-college-get-plain';
import { apiCollegesImportCollegesPost } from '../fn/colleges/api-colleges-import-colleges-post';
import { ApiCollegesImportCollegesPost$Params } from '../fn/colleges/api-colleges-import-colleges-post';
import { apiCollegesImportCollegesPost$Plain } from '../fn/colleges/api-colleges-import-colleges-post-plain';
import { ApiCollegesImportCollegesPost$Plain$Params } from '../fn/colleges/api-colleges-import-colleges-post-plain';
import { apiCollegesUpdateBannerCollegePatch } from '../fn/colleges/api-colleges-update-banner-college-patch';
import { ApiCollegesUpdateBannerCollegePatch$Params } from '../fn/colleges/api-colleges-update-banner-college-patch';
import { apiCollegesUpdateBannerCollegePatch$Plain } from '../fn/colleges/api-colleges-update-banner-college-patch-plain';
import { ApiCollegesUpdateBannerCollegePatch$Plain$Params } from '../fn/colleges/api-colleges-update-banner-college-patch-plain';
import { apiCollegesUpdateCollegePut } from '../fn/colleges/api-colleges-update-college-put';
import { ApiCollegesUpdateCollegePut$Params } from '../fn/colleges/api-colleges-update-college-put';
import { apiCollegesUpdateCollegePut$Plain } from '../fn/colleges/api-colleges-update-college-put-plain';
import { ApiCollegesUpdateCollegePut$Plain$Params } from '../fn/colleges/api-colleges-update-college-put-plain';
import { apiCollegesUpdateLogoCollegePatch } from '../fn/colleges/api-colleges-update-logo-college-patch';
import { ApiCollegesUpdateLogoCollegePatch$Params } from '../fn/colleges/api-colleges-update-logo-college-patch';
import { apiCollegesUpdateLogoCollegePatch$Plain } from '../fn/colleges/api-colleges-update-logo-college-patch-plain';
import { ApiCollegesUpdateLogoCollegePatch$Plain$Params } from '../fn/colleges/api-colleges-update-logo-college-patch-plain';
import { apiCollegesUpdateOwnCollegePatch } from '../fn/colleges/api-colleges-update-own-college-patch';
import { ApiCollegesUpdateOwnCollegePatch$Params } from '../fn/colleges/api-colleges-update-own-college-patch';
import { apiCollegesUpdateOwnCollegePatch$Plain } from '../fn/colleges/api-colleges-update-own-college-patch-plain';
import { ApiCollegesUpdateOwnCollegePatch$Plain$Params } from '../fn/colleges/api-colleges-update-own-college-patch-plain';
import { CreateCollegeResponse as EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse } from '../models/Education/Application/UseCases/Colleges/CreateCollegeCommand/create-college-response';
import { CreateCollegesResponse as EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse } from '../models/Education/Application/UseCases/Colleges/CreateCollegesCommand/create-colleges-response';
import { GetCollegeResponse as EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse } from '../models/Education/Application/UseCases/Colleges/GetCollegeQuery/get-college-response';
import { GetCollegesResponse as EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse } from '../models/Education/Application/UseCases/Colleges/GetCollegesQuery/get-colleges-response';
import { GetOwnCollegeResponse as EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse } from '../models/Education/Application/UseCases/Colleges/GetOwnCollegeQuery/get-own-college-response';
import { UpdateCollegeResponse as EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse } from '../models/Education/Application/UseCases/Colleges/UpdateCollegeCommand/update-college-response';
import { UpdateOwnBannerCollegeResponse as EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse } from '../models/Education/Application/UseCases/Colleges/UpdateOwnBannerCollegeCommand/update-own-banner-college-response';
import { UpdateOwnCollegeResponse as EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse } from '../models/Education/Application/UseCases/Colleges/UpdateOwnCollegeCommand/update-own-college-response';
import { UpdateOwnLogoCollegeResponse as EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse } from '../models/Education/Application/UseCases/Colleges/UpdateOwnLogoCollegeCommand/update-own-logo-college-response';

@Injectable({ providedIn: 'root' })
export class CollegesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCollegesCreateCollegePost()` */
  static readonly ApiCollegesCreateCollegePostPath = '/api/Colleges/CreateCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesCreateCollegePost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesCreateCollegePost$Plain$Response(params?: ApiCollegesCreateCollegePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse>> {
    return apiCollegesCreateCollegePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesCreateCollegePost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesCreateCollegePost$Plain(params?: ApiCollegesCreateCollegePost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse> {
    return this.apiCollegesCreateCollegePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse>): EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesCreateCollegePost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesCreateCollegePost$Response(params?: ApiCollegesCreateCollegePost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse>> {
    return apiCollegesCreateCollegePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesCreateCollegePost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesCreateCollegePost(params?: ApiCollegesCreateCollegePost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse> {
    return this.apiCollegesCreateCollegePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse>): EducationApplicationUseCasesCollegesCreateCollegeCommandCreateCollegeResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesImportCollegesPost()` */
  static readonly ApiCollegesImportCollegesPostPath = '/api/Colleges/ImportColleges';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesImportCollegesPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesImportCollegesPost$Plain$Response(params?: ApiCollegesImportCollegesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse>> {
    return apiCollegesImportCollegesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesImportCollegesPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesImportCollegesPost$Plain(params?: ApiCollegesImportCollegesPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse> {
    return this.apiCollegesImportCollegesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse>): EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesImportCollegesPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesImportCollegesPost$Response(params?: ApiCollegesImportCollegesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse>> {
    return apiCollegesImportCollegesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesImportCollegesPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesImportCollegesPost(params?: ApiCollegesImportCollegesPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse> {
    return this.apiCollegesImportCollegesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse>): EducationApplicationUseCasesCollegesCreateCollegesCommandCreateCollegesResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesGetCollegesGet()` */
  static readonly ApiCollegesGetCollegesGetPath = '/api/Colleges/GetColleges';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesGetCollegesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegesGet$Plain$Response(params?: ApiCollegesGetCollegesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse>> {
    return apiCollegesGetCollegesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesGetCollegesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegesGet$Plain(params?: ApiCollegesGetCollegesGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse> {
    return this.apiCollegesGetCollegesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse>): EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesGetCollegesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegesGet$Response(params?: ApiCollegesGetCollegesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse>> {
    return apiCollegesGetCollegesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesGetCollegesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegesGet(params?: ApiCollegesGetCollegesGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse> {
    return this.apiCollegesGetCollegesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse>): EducationApplicationUseCasesCollegesGetCollegesQueryGetCollegesResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesGetCollegeGet()` */
  static readonly ApiCollegesGetCollegeGetPath = '/api/Colleges/GetCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesGetCollegeGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegeGet$Plain$Response(params: ApiCollegesGetCollegeGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse>> {
    return apiCollegesGetCollegeGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesGetCollegeGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegeGet$Plain(params: ApiCollegesGetCollegeGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse> {
    return this.apiCollegesGetCollegeGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse>): EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesGetCollegeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegeGet$Response(params: ApiCollegesGetCollegeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse>> {
    return apiCollegesGetCollegeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesGetCollegeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetCollegeGet(params: ApiCollegesGetCollegeGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse> {
    return this.apiCollegesGetCollegeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse>): EducationApplicationUseCasesCollegesGetCollegeQueryGetCollegeResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesUpdateCollegePut()` */
  static readonly ApiCollegesUpdateCollegePutPath = '/api/Colleges/UpdateCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateCollegePut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateCollegePut$Plain$Response(params?: ApiCollegesUpdateCollegePut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse>> {
    return apiCollegesUpdateCollegePut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateCollegePut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateCollegePut$Plain(params?: ApiCollegesUpdateCollegePut$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse> {
    return this.apiCollegesUpdateCollegePut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse>): EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateCollegePut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateCollegePut$Response(params?: ApiCollegesUpdateCollegePut$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse>> {
    return apiCollegesUpdateCollegePut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateCollegePut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateCollegePut(params?: ApiCollegesUpdateCollegePut$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse> {
    return this.apiCollegesUpdateCollegePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse>): EducationApplicationUseCasesCollegesUpdateCollegeCommandUpdateCollegeResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesGetOwnCollegeGet()` */
  static readonly ApiCollegesGetOwnCollegeGetPath = '/api/Colleges/GetOwnCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesGetOwnCollegeGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetOwnCollegeGet$Plain$Response(params?: ApiCollegesGetOwnCollegeGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse>> {
    return apiCollegesGetOwnCollegeGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesGetOwnCollegeGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetOwnCollegeGet$Plain(params?: ApiCollegesGetOwnCollegeGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse> {
    return this.apiCollegesGetOwnCollegeGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse>): EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesGetOwnCollegeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetOwnCollegeGet$Response(params?: ApiCollegesGetOwnCollegeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse>> {
    return apiCollegesGetOwnCollegeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesGetOwnCollegeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollegesGetOwnCollegeGet(params?: ApiCollegesGetOwnCollegeGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse> {
    return this.apiCollegesGetOwnCollegeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse>): EducationApplicationUseCasesCollegesGetOwnCollegeQueryGetOwnCollegeResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesUpdateOwnCollegePatch()` */
  static readonly ApiCollegesUpdateOwnCollegePatchPath = '/api/Colleges/UpdateOwnCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateOwnCollegePatch$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateOwnCollegePatch$Plain$Response(params?: ApiCollegesUpdateOwnCollegePatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse>> {
    return apiCollegesUpdateOwnCollegePatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateOwnCollegePatch$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateOwnCollegePatch$Plain(params?: ApiCollegesUpdateOwnCollegePatch$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse> {
    return this.apiCollegesUpdateOwnCollegePatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse>): EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateOwnCollegePatch()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateOwnCollegePatch$Response(params?: ApiCollegesUpdateOwnCollegePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse>> {
    return apiCollegesUpdateOwnCollegePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateOwnCollegePatch$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollegesUpdateOwnCollegePatch(params?: ApiCollegesUpdateOwnCollegePatch$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse> {
    return this.apiCollegesUpdateOwnCollegePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse>): EducationApplicationUseCasesCollegesUpdateOwnCollegeCommandUpdateOwnCollegeResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesUpdateBannerCollegePatch()` */
  static readonly ApiCollegesUpdateBannerCollegePatchPath = '/api/Colleges/UpdateBannerCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateBannerCollegePatch$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateBannerCollegePatch$Plain$Response(params?: ApiCollegesUpdateBannerCollegePatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse>> {
    return apiCollegesUpdateBannerCollegePatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateBannerCollegePatch$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateBannerCollegePatch$Plain(params?: ApiCollegesUpdateBannerCollegePatch$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse> {
    return this.apiCollegesUpdateBannerCollegePatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse>): EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateBannerCollegePatch()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateBannerCollegePatch$Response(params?: ApiCollegesUpdateBannerCollegePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse>> {
    return apiCollegesUpdateBannerCollegePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateBannerCollegePatch$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateBannerCollegePatch(params?: ApiCollegesUpdateBannerCollegePatch$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse> {
    return this.apiCollegesUpdateBannerCollegePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse>): EducationApplicationUseCasesCollegesUpdateOwnBannerCollegeCommandUpdateOwnBannerCollegeResponse => r.body)
    );
  }

  /** Path part for operation `apiCollegesUpdateLogoCollegePatch()` */
  static readonly ApiCollegesUpdateLogoCollegePatchPath = '/api/Colleges/UpdateLogoCollege';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateLogoCollegePatch$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateLogoCollegePatch$Plain$Response(params?: ApiCollegesUpdateLogoCollegePatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse>> {
    return apiCollegesUpdateLogoCollegePatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateLogoCollegePatch$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateLogoCollegePatch$Plain(params?: ApiCollegesUpdateLogoCollegePatch$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse> {
    return this.apiCollegesUpdateLogoCollegePatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse>): EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollegesUpdateLogoCollegePatch()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateLogoCollegePatch$Response(params?: ApiCollegesUpdateLogoCollegePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse>> {
    return apiCollegesUpdateLogoCollegePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollegesUpdateLogoCollegePatch$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCollegesUpdateLogoCollegePatch(params?: ApiCollegesUpdateLogoCollegePatch$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse> {
    return this.apiCollegesUpdateLogoCollegePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse>): EducationApplicationUseCasesCollegesUpdateOwnLogoCollegeCommandUpdateOwnLogoCollegeResponse => r.body)
    );
  }

}
