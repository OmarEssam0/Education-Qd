/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCoursesCreateCoursePost } from '../fn/courses/api-courses-create-course-post';
import { ApiCoursesCreateCoursePost$Params } from '../fn/courses/api-courses-create-course-post';
import { apiCoursesCreateCoursePost$Plain } from '../fn/courses/api-courses-create-course-post-plain';
import { ApiCoursesCreateCoursePost$Plain$Params } from '../fn/courses/api-courses-create-course-post-plain';
import { apiCoursesGetAllCoursesGet } from '../fn/courses/api-courses-get-all-courses-get';
import { ApiCoursesGetAllCoursesGet$Params } from '../fn/courses/api-courses-get-all-courses-get';
import { apiCoursesGetAllCoursesGet$Plain } from '../fn/courses/api-courses-get-all-courses-get-plain';
import { ApiCoursesGetAllCoursesGet$Plain$Params } from '../fn/courses/api-courses-get-all-courses-get-plain';
import { apiCoursesGetCourseGet } from '../fn/courses/api-courses-get-course-get';
import { ApiCoursesGetCourseGet$Params } from '../fn/courses/api-courses-get-course-get';
import { apiCoursesGetCourseGet$Plain } from '../fn/courses/api-courses-get-course-get-plain';
import { ApiCoursesGetCourseGet$Plain$Params } from '../fn/courses/api-courses-get-course-get-plain';
import { apiCoursesGetCoursesGet } from '../fn/courses/api-courses-get-courses-get';
import { ApiCoursesGetCoursesGet$Params } from '../fn/courses/api-courses-get-courses-get';
import { apiCoursesGetCoursesGet$Plain } from '../fn/courses/api-courses-get-courses-get-plain';
import { ApiCoursesGetCoursesGet$Plain$Params } from '../fn/courses/api-courses-get-courses-get-plain';
import { apiCoursesImportCoursesPost } from '../fn/courses/api-courses-import-courses-post';
import { ApiCoursesImportCoursesPost$Params } from '../fn/courses/api-courses-import-courses-post';
import { apiCoursesImportCoursesPost$Plain } from '../fn/courses/api-courses-import-courses-post-plain';
import { ApiCoursesImportCoursesPost$Plain$Params } from '../fn/courses/api-courses-import-courses-post-plain';
import { apiCoursesUpdateCoursePut } from '../fn/courses/api-courses-update-course-put';
import { ApiCoursesUpdateCoursePut$Params } from '../fn/courses/api-courses-update-course-put';
import { apiCoursesUpdateCoursePut$Plain } from '../fn/courses/api-courses-update-course-put-plain';
import { ApiCoursesUpdateCoursePut$Plain$Params } from '../fn/courses/api-courses-update-course-put-plain';
import { CreateCourseResponse as EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse } from '../models/Education/Application/UseCases/Courses/CreateCourseCommand/create-course-response';
import { CreateCoursesResponse as EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse } from '../models/Education/Application/UseCases/Courses/CreateCoursesCommand/create-courses-response';
import { GetAllCoursesResponse as EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse } from '../models/Education/Application/UseCases/Courses/GetAllCoursesQuery/get-all-courses-response';
import { GetCourseResponse as EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse } from '../models/Education/Application/UseCases/Courses/GetCourseQuery/get-course-response';
import { GetCoursesResponse as EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse } from '../models/Education/Application/UseCases/Courses/GetCoursesQuery/get-courses-response';
import { UpdateCourseResponse as EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse } from '../models/Education/Application/UseCases/Courses/UpdateCourseCommand/update-course-response';

@Injectable({ providedIn: 'root' })
export class CoursesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCoursesCreateCoursePost()` */
  static readonly ApiCoursesCreateCoursePostPath = '/api/Courses/CreateCourse';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesCreateCoursePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesCreateCoursePost$Plain$Response(params?: ApiCoursesCreateCoursePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse>> {
    return apiCoursesCreateCoursePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesCreateCoursePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesCreateCoursePost$Plain(params?: ApiCoursesCreateCoursePost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse> {
    return this.apiCoursesCreateCoursePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse>): EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesCreateCoursePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesCreateCoursePost$Response(params?: ApiCoursesCreateCoursePost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse>> {
    return apiCoursesCreateCoursePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesCreateCoursePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesCreateCoursePost(params?: ApiCoursesCreateCoursePost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse> {
    return this.apiCoursesCreateCoursePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse>): EducationApplicationUseCasesCoursesCreateCourseCommandCreateCourseResponse => r.body)
    );
  }

  /** Path part for operation `apiCoursesImportCoursesPost()` */
  static readonly ApiCoursesImportCoursesPostPath = '/api/Courses/ImportCourses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesImportCoursesPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCoursesImportCoursesPost$Plain$Response(params?: ApiCoursesImportCoursesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse>> {
    return apiCoursesImportCoursesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesImportCoursesPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCoursesImportCoursesPost$Plain(params?: ApiCoursesImportCoursesPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse> {
    return this.apiCoursesImportCoursesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse>): EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesImportCoursesPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCoursesImportCoursesPost$Response(params?: ApiCoursesImportCoursesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse>> {
    return apiCoursesImportCoursesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesImportCoursesPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiCoursesImportCoursesPost(params?: ApiCoursesImportCoursesPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse> {
    return this.apiCoursesImportCoursesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse>): EducationApplicationUseCasesCoursesCreateCoursesCommandCreateCoursesResponse => r.body)
    );
  }

  /** Path part for operation `apiCoursesGetCoursesGet()` */
  static readonly ApiCoursesGetCoursesGetPath = '/api/Courses/GetCourses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesGetCoursesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCoursesGet$Plain$Response(params?: ApiCoursesGetCoursesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse>> {
    return apiCoursesGetCoursesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesGetCoursesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCoursesGet$Plain(params?: ApiCoursesGetCoursesGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse> {
    return this.apiCoursesGetCoursesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse>): EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesGetCoursesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCoursesGet$Response(params?: ApiCoursesGetCoursesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse>> {
    return apiCoursesGetCoursesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesGetCoursesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCoursesGet(params?: ApiCoursesGetCoursesGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse> {
    return this.apiCoursesGetCoursesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse>): EducationApplicationUseCasesCoursesGetCoursesQueryGetCoursesResponse => r.body)
    );
  }

  /** Path part for operation `apiCoursesGetCourseGet()` */
  static readonly ApiCoursesGetCourseGetPath = '/api/Courses/GetCourse';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesGetCourseGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCourseGet$Plain$Response(params?: ApiCoursesGetCourseGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse>> {
    return apiCoursesGetCourseGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesGetCourseGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCourseGet$Plain(params?: ApiCoursesGetCourseGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse> {
    return this.apiCoursesGetCourseGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse>): EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesGetCourseGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCourseGet$Response(params?: ApiCoursesGetCourseGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse>> {
    return apiCoursesGetCourseGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesGetCourseGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetCourseGet(params?: ApiCoursesGetCourseGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse> {
    return this.apiCoursesGetCourseGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse>): EducationApplicationUseCasesCoursesGetCourseQueryGetCourseResponse => r.body)
    );
  }

  /** Path part for operation `apiCoursesUpdateCoursePut()` */
  static readonly ApiCoursesUpdateCoursePutPath = '/api/Courses/UpdateCourse';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesUpdateCoursePut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesUpdateCoursePut$Plain$Response(params?: ApiCoursesUpdateCoursePut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse>> {
    return apiCoursesUpdateCoursePut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesUpdateCoursePut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesUpdateCoursePut$Plain(params?: ApiCoursesUpdateCoursePut$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse> {
    return this.apiCoursesUpdateCoursePut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse>): EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesUpdateCoursePut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesUpdateCoursePut$Response(params?: ApiCoursesUpdateCoursePut$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse>> {
    return apiCoursesUpdateCoursePut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesUpdateCoursePut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCoursesUpdateCoursePut(params?: ApiCoursesUpdateCoursePut$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse> {
    return this.apiCoursesUpdateCoursePut$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse>): EducationApplicationUseCasesCoursesUpdateCourseCommandUpdateCourseResponse => r.body)
    );
  }

  /** Path part for operation `apiCoursesGetAllCoursesGet()` */
  static readonly ApiCoursesGetAllCoursesGetPath = '/api/Courses/GetAllCourses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesGetAllCoursesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetAllCoursesGet$Plain$Response(params?: ApiCoursesGetAllCoursesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse>> {
    return apiCoursesGetAllCoursesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesGetAllCoursesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetAllCoursesGet$Plain(params?: ApiCoursesGetAllCoursesGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse> {
    return this.apiCoursesGetAllCoursesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse>): EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCoursesGetAllCoursesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetAllCoursesGet$Response(params?: ApiCoursesGetAllCoursesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse>> {
    return apiCoursesGetAllCoursesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCoursesGetAllCoursesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCoursesGetAllCoursesGet(params?: ApiCoursesGetAllCoursesGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse> {
    return this.apiCoursesGetAllCoursesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse>): EducationApplicationUseCasesCoursesGetAllCoursesQueryGetAllCoursesResponse => r.body)
    );
  }

}
