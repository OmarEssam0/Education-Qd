/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiProfessorsAssignProfessorToCoursesPatch } from '../fn/professors/api-professors-assign-professor-to-courses-patch';
import { ApiProfessorsAssignProfessorToCoursesPatch$Params } from '../fn/professors/api-professors-assign-professor-to-courses-patch';
import { apiProfessorsCreateProfessorPost } from '../fn/professors/api-professors-create-professor-post';
import { ApiProfessorsCreateProfessorPost$Params } from '../fn/professors/api-professors-create-professor-post';
import { apiProfessorsCreateProfessorPost$Plain } from '../fn/professors/api-professors-create-professor-post-plain';
import { ApiProfessorsCreateProfessorPost$Plain$Params } from '../fn/professors/api-professors-create-professor-post-plain';
import { apiProfessorsGetAllProfessorByCourseGet } from '../fn/professors/api-professors-get-all-professor-by-course-get';
import { ApiProfessorsGetAllProfessorByCourseGet$Params } from '../fn/professors/api-professors-get-all-professor-by-course-get';
import { apiProfessorsGetAllProfessorByCourseGet$Plain } from '../fn/professors/api-professors-get-all-professor-by-course-get-plain';
import { ApiProfessorsGetAllProfessorByCourseGet$Plain$Params } from '../fn/professors/api-professors-get-all-professor-by-course-get-plain';
import { apiProfessorsGetOwnProfessorCourseGet } from '../fn/professors/api-professors-get-own-professor-course-get';
import { ApiProfessorsGetOwnProfessorCourseGet$Params } from '../fn/professors/api-professors-get-own-professor-course-get';
import { apiProfessorsGetOwnProfessorCourseGet$Plain } from '../fn/professors/api-professors-get-own-professor-course-get-plain';
import { ApiProfessorsGetOwnProfessorCourseGet$Plain$Params } from '../fn/professors/api-professors-get-own-professor-course-get-plain';
import { apiProfessorsGetOwnProfessorCoursesGet } from '../fn/professors/api-professors-get-own-professor-courses-get';
import { ApiProfessorsGetOwnProfessorCoursesGet$Params } from '../fn/professors/api-professors-get-own-professor-courses-get';
import { apiProfessorsGetOwnProfessorCoursesGet$Plain } from '../fn/professors/api-professors-get-own-professor-courses-get-plain';
import { ApiProfessorsGetOwnProfessorCoursesGet$Plain$Params } from '../fn/professors/api-professors-get-own-professor-courses-get-plain';
import { apiProfessorsGetProfessorGet } from '../fn/professors/api-professors-get-professor-get';
import { ApiProfessorsGetProfessorGet$Params } from '../fn/professors/api-professors-get-professor-get';
import { apiProfessorsGetProfessorGet$Plain } from '../fn/professors/api-professors-get-professor-get-plain';
import { ApiProfessorsGetProfessorGet$Plain$Params } from '../fn/professors/api-professors-get-professor-get-plain';
import { apiProfessorsGetProfessorsGet } from '../fn/professors/api-professors-get-professors-get';
import { ApiProfessorsGetProfessorsGet$Params } from '../fn/professors/api-professors-get-professors-get';
import { apiProfessorsGetProfessorsGet$Plain } from '../fn/professors/api-professors-get-professors-get-plain';
import { ApiProfessorsGetProfessorsGet$Plain$Params } from '../fn/professors/api-professors-get-professors-get-plain';
import { apiProfessorsImportProfessorsPost } from '../fn/professors/api-professors-import-professors-post';
import { ApiProfessorsImportProfessorsPost$Params } from '../fn/professors/api-professors-import-professors-post';
import { apiProfessorsImportProfessorsPost$Plain } from '../fn/professors/api-professors-import-professors-post-plain';
import { ApiProfessorsImportProfessorsPost$Plain$Params } from '../fn/professors/api-professors-import-professors-post-plain';
import { apiProfessorsUpdateProfessorPut } from '../fn/professors/api-professors-update-professor-put';
import { ApiProfessorsUpdateProfessorPut$Params } from '../fn/professors/api-professors-update-professor-put';
import { apiProfessorsUpdateProfessorPut$Plain } from '../fn/professors/api-professors-update-professor-put-plain';
import { ApiProfessorsUpdateProfessorPut$Plain$Params } from '../fn/professors/api-professors-update-professor-put-plain';
import { apiProfessorsUploadContentProfessorCoursePatch } from '../fn/professors/api-professors-upload-content-professor-course-patch';
import { ApiProfessorsUploadContentProfessorCoursePatch$Params } from '../fn/professors/api-professors-upload-content-professor-course-patch';
import { CreateProfessorResponse as EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse } from '../models/Education/Application/UseCases/Professors/CreateProfessorCommand/create-professor-response';
import { CreateProfessorsResponse as EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse } from '../models/Education/Application/UseCases/Professors/CreateProfessorsCommand/create-professors-response';
import { GetAllProfessorsByCourseResponse as EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse } from '../models/Education/Application/UseCases/Professors/GetAllProfessorsByCourseQuery/get-all-professors-by-course-response';
import { GetAllProfessorsResponse as EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse } from '../models/Education/Application/UseCases/Professors/GetAllProfessorsQuery/get-all-professors-response';
import { GetOwnAllProfessorCoursesResponse as EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse } from '../models/Education/Application/UseCases/Professors/GetOwnAllProfessorCoursesQuery/get-own-all-professor-courses-response';
import { GetOwnProfessorCourseResponse as EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse } from '../models/Education/Application/UseCases/Professors/GetOwnProfessorCourseQuery/get-own-professor-course-response';
import { GetProfessorResponse as EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse } from '../models/Education/Application/UseCases/Professors/GetProfessorQuery/get-professor-response';
import { UpdateProfessorResponse as EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse } from '../models/Education/Application/UseCases/Professors/UpdateProfessorCommand/update-professor-response';

@Injectable({ providedIn: 'root' })
export class ProfessorsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiProfessorsCreateProfessorPost()` */
  static readonly ApiProfessorsCreateProfessorPostPath = '/api/Professors/CreateProfessor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsCreateProfessorPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsCreateProfessorPost$Plain$Response(params?: ApiProfessorsCreateProfessorPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse>> {
    return apiProfessorsCreateProfessorPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsCreateProfessorPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsCreateProfessorPost$Plain(params?: ApiProfessorsCreateProfessorPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse> {
    return this.apiProfessorsCreateProfessorPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse>): EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsCreateProfessorPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsCreateProfessorPost$Response(params?: ApiProfessorsCreateProfessorPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse>> {
    return apiProfessorsCreateProfessorPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsCreateProfessorPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsCreateProfessorPost(params?: ApiProfessorsCreateProfessorPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse> {
    return this.apiProfessorsCreateProfessorPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse>): EducationApplicationUseCasesProfessorsCreateProfessorCommandCreateProfessorResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsImportProfessorsPost()` */
  static readonly ApiProfessorsImportProfessorsPostPath = '/api/Professors/ImportProfessors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsImportProfessorsPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiProfessorsImportProfessorsPost$Plain$Response(params?: ApiProfessorsImportProfessorsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse>> {
    return apiProfessorsImportProfessorsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsImportProfessorsPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiProfessorsImportProfessorsPost$Plain(params?: ApiProfessorsImportProfessorsPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse> {
    return this.apiProfessorsImportProfessorsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse>): EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsImportProfessorsPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiProfessorsImportProfessorsPost$Response(params?: ApiProfessorsImportProfessorsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse>> {
    return apiProfessorsImportProfessorsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsImportProfessorsPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiProfessorsImportProfessorsPost(params?: ApiProfessorsImportProfessorsPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse> {
    return this.apiProfessorsImportProfessorsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse>): EducationApplicationUseCasesProfessorsCreateProfessorsCommandCreateProfessorsResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsGetProfessorsGet()` */
  static readonly ApiProfessorsGetProfessorsGetPath = '/api/Professors/GetProfessors';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetProfessorsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorsGet$Plain$Response(params?: ApiProfessorsGetProfessorsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse>> {
    return apiProfessorsGetProfessorsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetProfessorsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorsGet$Plain(params?: ApiProfessorsGetProfessorsGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse> {
    return this.apiProfessorsGetProfessorsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse>): EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetProfessorsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorsGet$Response(params?: ApiProfessorsGetProfessorsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse>> {
    return apiProfessorsGetProfessorsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetProfessorsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorsGet(params?: ApiProfessorsGetProfessorsGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse> {
    return this.apiProfessorsGetProfessorsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse>): EducationApplicationUseCasesProfessorsGetAllProfessorsQueryGetAllProfessorsResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsGetProfessorGet()` */
  static readonly ApiProfessorsGetProfessorGetPath = '/api/Professors/GetProfessor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetProfessorGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorGet$Plain$Response(params: ApiProfessorsGetProfessorGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse>> {
    return apiProfessorsGetProfessorGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetProfessorGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorGet$Plain(params: ApiProfessorsGetProfessorGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse> {
    return this.apiProfessorsGetProfessorGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse>): EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetProfessorGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorGet$Response(params: ApiProfessorsGetProfessorGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse>> {
    return apiProfessorsGetProfessorGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetProfessorGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetProfessorGet(params: ApiProfessorsGetProfessorGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse> {
    return this.apiProfessorsGetProfessorGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse>): EducationApplicationUseCasesProfessorsGetProfessorQueryGetProfessorResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsUpdateProfessorPut()` */
  static readonly ApiProfessorsUpdateProfessorPutPath = '/api/Professors/UpdateProfessor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsUpdateProfessorPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsUpdateProfessorPut$Plain$Response(params?: ApiProfessorsUpdateProfessorPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse>> {
    return apiProfessorsUpdateProfessorPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsUpdateProfessorPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsUpdateProfessorPut$Plain(params?: ApiProfessorsUpdateProfessorPut$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse> {
    return this.apiProfessorsUpdateProfessorPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse>): EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsUpdateProfessorPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsUpdateProfessorPut$Response(params?: ApiProfessorsUpdateProfessorPut$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse>> {
    return apiProfessorsUpdateProfessorPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsUpdateProfessorPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsUpdateProfessorPut(params?: ApiProfessorsUpdateProfessorPut$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse> {
    return this.apiProfessorsUpdateProfessorPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse>): EducationApplicationUseCasesProfessorsUpdateProfessorCommandUpdateProfessorResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsAssignProfessorToCoursesPatch()` */
  static readonly ApiProfessorsAssignProfessorToCoursesPatchPath = '/api/Professors/AssignProfessorToCourses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsAssignProfessorToCoursesPatch()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsAssignProfessorToCoursesPatch$Response(params?: ApiProfessorsAssignProfessorToCoursesPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProfessorsAssignProfessorToCoursesPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsAssignProfessorToCoursesPatch$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiProfessorsAssignProfessorToCoursesPatch(params?: ApiProfessorsAssignProfessorToCoursesPatch$Params, context?: HttpContext): Observable<void> {
    return this.apiProfessorsAssignProfessorToCoursesPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProfessorsGetOwnProfessorCoursesGet()` */
  static readonly ApiProfessorsGetOwnProfessorCoursesGetPath = '/api/Professors/GetOwnProfessorCourses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetOwnProfessorCoursesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCoursesGet$Plain$Response(params?: ApiProfessorsGetOwnProfessorCoursesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse>> {
    return apiProfessorsGetOwnProfessorCoursesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetOwnProfessorCoursesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCoursesGet$Plain(params?: ApiProfessorsGetOwnProfessorCoursesGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse> {
    return this.apiProfessorsGetOwnProfessorCoursesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse>): EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetOwnProfessorCoursesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCoursesGet$Response(params?: ApiProfessorsGetOwnProfessorCoursesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse>> {
    return apiProfessorsGetOwnProfessorCoursesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetOwnProfessorCoursesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCoursesGet(params?: ApiProfessorsGetOwnProfessorCoursesGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse> {
    return this.apiProfessorsGetOwnProfessorCoursesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse>): EducationApplicationUseCasesProfessorsGetOwnAllProfessorCoursesQueryGetOwnAllProfessorCoursesResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsGetOwnProfessorCourseGet()` */
  static readonly ApiProfessorsGetOwnProfessorCourseGetPath = '/api/Professors/GetOwnProfessorCourse';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetOwnProfessorCourseGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCourseGet$Plain$Response(params: ApiProfessorsGetOwnProfessorCourseGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse>> {
    return apiProfessorsGetOwnProfessorCourseGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetOwnProfessorCourseGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCourseGet$Plain(params: ApiProfessorsGetOwnProfessorCourseGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse> {
    return this.apiProfessorsGetOwnProfessorCourseGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse>): EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetOwnProfessorCourseGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCourseGet$Response(params: ApiProfessorsGetOwnProfessorCourseGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse>> {
    return apiProfessorsGetOwnProfessorCourseGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetOwnProfessorCourseGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetOwnProfessorCourseGet(params: ApiProfessorsGetOwnProfessorCourseGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse> {
    return this.apiProfessorsGetOwnProfessorCourseGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse>): EducationApplicationUseCasesProfessorsGetOwnProfessorCourseQueryGetOwnProfessorCourseResponse => r.body)
    );
  }

  /** Path part for operation `apiProfessorsUploadContentProfessorCoursePatch()` */
  static readonly ApiProfessorsUploadContentProfessorCoursePatchPath = '/api/Professors/UploadContentProfessorCourse';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsUploadContentProfessorCoursePatch()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiProfessorsUploadContentProfessorCoursePatch$Response(params?: ApiProfessorsUploadContentProfessorCoursePatch$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiProfessorsUploadContentProfessorCoursePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsUploadContentProfessorCoursePatch$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiProfessorsUploadContentProfessorCoursePatch(params?: ApiProfessorsUploadContentProfessorCoursePatch$Params, context?: HttpContext): Observable<void> {
    return this.apiProfessorsUploadContentProfessorCoursePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiProfessorsGetAllProfessorByCourseGet()` */
  static readonly ApiProfessorsGetAllProfessorByCourseGetPath = '/api/Professors/GetAllProfessorByCourse';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetAllProfessorByCourseGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetAllProfessorByCourseGet$Plain$Response(params: ApiProfessorsGetAllProfessorByCourseGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse>> {
    return apiProfessorsGetAllProfessorByCourseGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetAllProfessorByCourseGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetAllProfessorByCourseGet$Plain(params: ApiProfessorsGetAllProfessorByCourseGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse> {
    return this.apiProfessorsGetAllProfessorByCourseGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse>): EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiProfessorsGetAllProfessorByCourseGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetAllProfessorByCourseGet$Response(params: ApiProfessorsGetAllProfessorByCourseGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse>> {
    return apiProfessorsGetAllProfessorByCourseGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiProfessorsGetAllProfessorByCourseGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiProfessorsGetAllProfessorByCourseGet(params: ApiProfessorsGetAllProfessorByCourseGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse> {
    return this.apiProfessorsGetAllProfessorByCourseGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse>): EducationApplicationUseCasesProfessorsGetAllProfessorsByCourseQueryGetAllProfessorsByCourseResponse => r.body)
    );
  }

}
