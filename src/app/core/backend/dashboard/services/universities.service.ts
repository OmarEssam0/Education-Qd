/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUniversitiesCreateUniversityPost } from '../fn/universities/api-universities-create-university-post';
import { ApiUniversitiesCreateUniversityPost$Params } from '../fn/universities/api-universities-create-university-post';
import { apiUniversitiesCreateUniversityPost$Plain } from '../fn/universities/api-universities-create-university-post-plain';
import { ApiUniversitiesCreateUniversityPost$Plain$Params } from '../fn/universities/api-universities-create-university-post-plain';
import { apiUniversitiesGetOwnUniversityGet } from '../fn/universities/api-universities-get-own-university-get';
import { ApiUniversitiesGetOwnUniversityGet$Params } from '../fn/universities/api-universities-get-own-university-get';
import { apiUniversitiesGetOwnUniversityGet$Plain } from '../fn/universities/api-universities-get-own-university-get-plain';
import { ApiUniversitiesGetOwnUniversityGet$Plain$Params } from '../fn/universities/api-universities-get-own-university-get-plain';
import { apiUniversitiesGetUniversitiesGet } from '../fn/universities/api-universities-get-universities-get';
import { ApiUniversitiesGetUniversitiesGet$Params } from '../fn/universities/api-universities-get-universities-get';
import { apiUniversitiesGetUniversitiesGet$Plain } from '../fn/universities/api-universities-get-universities-get-plain';
import { ApiUniversitiesGetUniversitiesGet$Plain$Params } from '../fn/universities/api-universities-get-universities-get-plain';
import { apiUniversitiesGetUniversityGet } from '../fn/universities/api-universities-get-university-get';
import { ApiUniversitiesGetUniversityGet$Params } from '../fn/universities/api-universities-get-university-get';
import { apiUniversitiesGetUniversityGet$Plain } from '../fn/universities/api-universities-get-university-get-plain';
import { ApiUniversitiesGetUniversityGet$Plain$Params } from '../fn/universities/api-universities-get-university-get-plain';
import { apiUniversitiesImportUniversitiesPost } from '../fn/universities/api-universities-import-universities-post';
import { ApiUniversitiesImportUniversitiesPost$Params } from '../fn/universities/api-universities-import-universities-post';
import { apiUniversitiesImportUniversitiesPost$Plain } from '../fn/universities/api-universities-import-universities-post-plain';
import { ApiUniversitiesImportUniversitiesPost$Plain$Params } from '../fn/universities/api-universities-import-universities-post-plain';
import { apiUniversitiesUpdateBannerUniversityPatch } from '../fn/universities/api-universities-update-banner-university-patch';
import { ApiUniversitiesUpdateBannerUniversityPatch$Params } from '../fn/universities/api-universities-update-banner-university-patch';
import { apiUniversitiesUpdateBannerUniversityPatch$Plain } from '../fn/universities/api-universities-update-banner-university-patch-plain';
import { ApiUniversitiesUpdateBannerUniversityPatch$Plain$Params } from '../fn/universities/api-universities-update-banner-university-patch-plain';
import { apiUniversitiesUpdateLogoUniversityPatch } from '../fn/universities/api-universities-update-logo-university-patch';
import { ApiUniversitiesUpdateLogoUniversityPatch$Params } from '../fn/universities/api-universities-update-logo-university-patch';
import { apiUniversitiesUpdateLogoUniversityPatch$Plain } from '../fn/universities/api-universities-update-logo-university-patch-plain';
import { ApiUniversitiesUpdateLogoUniversityPatch$Plain$Params } from '../fn/universities/api-universities-update-logo-university-patch-plain';
import { apiUniversitiesUpdateOwnUniversityPatch } from '../fn/universities/api-universities-update-own-university-patch';
import { ApiUniversitiesUpdateOwnUniversityPatch$Params } from '../fn/universities/api-universities-update-own-university-patch';
import { apiUniversitiesUpdateOwnUniversityPatch$Plain } from '../fn/universities/api-universities-update-own-university-patch-plain';
import { ApiUniversitiesUpdateOwnUniversityPatch$Plain$Params } from '../fn/universities/api-universities-update-own-university-patch-plain';
import { apiUniversitiesUpdateUniversityPut } from '../fn/universities/api-universities-update-university-put';
import { ApiUniversitiesUpdateUniversityPut$Params } from '../fn/universities/api-universities-update-university-put';
import { apiUniversitiesUpdateUniversityPut$Plain } from '../fn/universities/api-universities-update-university-put-plain';
import { ApiUniversitiesUpdateUniversityPut$Plain$Params } from '../fn/universities/api-universities-update-university-put-plain';
import { CreateUniversitiesResponse as EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse } from '../models/Education/Application/UseCases/Universities/CreateUniversitiesCommand/create-universities-response';
import { CreateUniversityResponse as EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse } from '../models/Education/Application/UseCases/Universities/CreateUniversityCommand/create-university-response';
import { GetOwnUniversityResponse as EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse } from '../models/Education/Application/UseCases/Universities/GetOwnUniversityQuery/get-own-university-response';
import { GetUniversitiesResponse as EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse } from '../models/Education/Application/UseCases/Universities/GetUniversitiesQuery/get-universities-response';
import { GetUniversityResponse as EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse } from '../models/Education/Application/UseCases/Universities/GetUniversityQuery/get-university-response';
import { UpdateOwnBannerUniversityResponse as EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse } from '../models/Education/Application/UseCases/Universities/UpdateOwnBannerUniversityCommand/update-own-banner-university-response';
import { UpdateOwnLogoUniversityResponse as EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse } from '../models/Education/Application/UseCases/Universities/UpdateOwnLogoUniversityCommand/update-own-logo-university-response';
import { UpdateOwnUniversityResponse as EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse } from '../models/Education/Application/UseCases/Universities/UpdateOwnUniversityCommand/update-own-university-response';
import { UpdateUniversityResponse as EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse } from '../models/Education/Application/UseCases/Universities/UpdateUniversityCommand/update-university-response';

@Injectable({ providedIn: 'root' })
export class UniversitiesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUniversitiesCreateUniversityPost()` */
  static readonly ApiUniversitiesCreateUniversityPostPath = '/api/Universities/CreateUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesCreateUniversityPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesCreateUniversityPost$Plain$Response(params?: ApiUniversitiesCreateUniversityPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse>> {
    return apiUniversitiesCreateUniversityPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesCreateUniversityPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesCreateUniversityPost$Plain(params?: ApiUniversitiesCreateUniversityPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse> {
    return this.apiUniversitiesCreateUniversityPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse>): EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesCreateUniversityPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesCreateUniversityPost$Response(params?: ApiUniversitiesCreateUniversityPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse>> {
    return apiUniversitiesCreateUniversityPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesCreateUniversityPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesCreateUniversityPost(params?: ApiUniversitiesCreateUniversityPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse> {
    return this.apiUniversitiesCreateUniversityPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse>): EducationApplicationUseCasesUniversitiesCreateUniversityCommandCreateUniversityResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesImportUniversitiesPost()` */
  static readonly ApiUniversitiesImportUniversitiesPostPath = '/api/Universities/ImportUniversities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesImportUniversitiesPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesImportUniversitiesPost$Plain$Response(params?: ApiUniversitiesImportUniversitiesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse>> {
    return apiUniversitiesImportUniversitiesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesImportUniversitiesPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesImportUniversitiesPost$Plain(params?: ApiUniversitiesImportUniversitiesPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse> {
    return this.apiUniversitiesImportUniversitiesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse>): EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesImportUniversitiesPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesImportUniversitiesPost$Response(params?: ApiUniversitiesImportUniversitiesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse>> {
    return apiUniversitiesImportUniversitiesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesImportUniversitiesPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesImportUniversitiesPost(params?: ApiUniversitiesImportUniversitiesPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse> {
    return this.apiUniversitiesImportUniversitiesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse>): EducationApplicationUseCasesUniversitiesCreateUniversitiesCommandCreateUniversitiesResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesGetUniversitiesGet()` */
  static readonly ApiUniversitiesGetUniversitiesGetPath = '/api/Universities/GetUniversities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesGetUniversitiesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversitiesGet$Plain$Response(params?: ApiUniversitiesGetUniversitiesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse>> {
    return apiUniversitiesGetUniversitiesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesGetUniversitiesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversitiesGet$Plain(params?: ApiUniversitiesGetUniversitiesGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse> {
    return this.apiUniversitiesGetUniversitiesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse>): EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesGetUniversitiesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversitiesGet$Response(params?: ApiUniversitiesGetUniversitiesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse>> {
    return apiUniversitiesGetUniversitiesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesGetUniversitiesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversitiesGet(params?: ApiUniversitiesGetUniversitiesGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse> {
    return this.apiUniversitiesGetUniversitiesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse>): EducationApplicationUseCasesUniversitiesGetUniversitiesQueryGetUniversitiesResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesGetUniversityGet()` */
  static readonly ApiUniversitiesGetUniversityGetPath = '/api/Universities/GetUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesGetUniversityGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversityGet$Plain$Response(params: ApiUniversitiesGetUniversityGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse>> {
    return apiUniversitiesGetUniversityGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesGetUniversityGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversityGet$Plain(params: ApiUniversitiesGetUniversityGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse> {
    return this.apiUniversitiesGetUniversityGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse>): EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesGetUniversityGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversityGet$Response(params: ApiUniversitiesGetUniversityGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse>> {
    return apiUniversitiesGetUniversityGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesGetUniversityGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetUniversityGet(params: ApiUniversitiesGetUniversityGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse> {
    return this.apiUniversitiesGetUniversityGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse>): EducationApplicationUseCasesUniversitiesGetUniversityQueryGetUniversityResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesUpdateUniversityPut()` */
  static readonly ApiUniversitiesUpdateUniversityPutPath = '/api/Universities/UpdateUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateUniversityPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateUniversityPut$Plain$Response(params?: ApiUniversitiesUpdateUniversityPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse>> {
    return apiUniversitiesUpdateUniversityPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateUniversityPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateUniversityPut$Plain(params?: ApiUniversitiesUpdateUniversityPut$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse> {
    return this.apiUniversitiesUpdateUniversityPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateUniversityPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateUniversityPut$Response(params?: ApiUniversitiesUpdateUniversityPut$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse>> {
    return apiUniversitiesUpdateUniversityPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateUniversityPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateUniversityPut(params?: ApiUniversitiesUpdateUniversityPut$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse> {
    return this.apiUniversitiesUpdateUniversityPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateUniversityCommandUpdateUniversityResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesGetOwnUniversityGet()` */
  static readonly ApiUniversitiesGetOwnUniversityGetPath = '/api/Universities/GetOwnUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesGetOwnUniversityGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetOwnUniversityGet$Plain$Response(params?: ApiUniversitiesGetOwnUniversityGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse>> {
    return apiUniversitiesGetOwnUniversityGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesGetOwnUniversityGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetOwnUniversityGet$Plain(params?: ApiUniversitiesGetOwnUniversityGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse> {
    return this.apiUniversitiesGetOwnUniversityGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse>): EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesGetOwnUniversityGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetOwnUniversityGet$Response(params?: ApiUniversitiesGetOwnUniversityGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse>> {
    return apiUniversitiesGetOwnUniversityGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesGetOwnUniversityGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUniversitiesGetOwnUniversityGet(params?: ApiUniversitiesGetOwnUniversityGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse> {
    return this.apiUniversitiesGetOwnUniversityGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse>): EducationApplicationUseCasesUniversitiesGetOwnUniversityQueryGetOwnUniversityResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesUpdateOwnUniversityPatch()` */
  static readonly ApiUniversitiesUpdateOwnUniversityPatchPath = '/api/Universities/UpdateOwnUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateOwnUniversityPatch$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateOwnUniversityPatch$Plain$Response(params?: ApiUniversitiesUpdateOwnUniversityPatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse>> {
    return apiUniversitiesUpdateOwnUniversityPatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateOwnUniversityPatch$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateOwnUniversityPatch$Plain(params?: ApiUniversitiesUpdateOwnUniversityPatch$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse> {
    return this.apiUniversitiesUpdateOwnUniversityPatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateOwnUniversityPatch()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateOwnUniversityPatch$Response(params?: ApiUniversitiesUpdateOwnUniversityPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse>> {
    return apiUniversitiesUpdateOwnUniversityPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateOwnUniversityPatch$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUniversitiesUpdateOwnUniversityPatch(params?: ApiUniversitiesUpdateOwnUniversityPatch$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse> {
    return this.apiUniversitiesUpdateOwnUniversityPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateOwnUniversityCommandUpdateOwnUniversityResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesUpdateBannerUniversityPatch()` */
  static readonly ApiUniversitiesUpdateBannerUniversityPatchPath = '/api/Universities/UpdateBannerUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateBannerUniversityPatch$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateBannerUniversityPatch$Plain$Response(params?: ApiUniversitiesUpdateBannerUniversityPatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse>> {
    return apiUniversitiesUpdateBannerUniversityPatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateBannerUniversityPatch$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateBannerUniversityPatch$Plain(params?: ApiUniversitiesUpdateBannerUniversityPatch$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse> {
    return this.apiUniversitiesUpdateBannerUniversityPatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateBannerUniversityPatch()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateBannerUniversityPatch$Response(params?: ApiUniversitiesUpdateBannerUniversityPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse>> {
    return apiUniversitiesUpdateBannerUniversityPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateBannerUniversityPatch$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateBannerUniversityPatch(params?: ApiUniversitiesUpdateBannerUniversityPatch$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse> {
    return this.apiUniversitiesUpdateBannerUniversityPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateOwnBannerUniversityCommandUpdateOwnBannerUniversityResponse => r.body)
    );
  }

  /** Path part for operation `apiUniversitiesUpdateLogoUniversityPatch()` */
  static readonly ApiUniversitiesUpdateLogoUniversityPatchPath = '/api/Universities/UpdateLogoUniversity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateLogoUniversityPatch$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateLogoUniversityPatch$Plain$Response(params?: ApiUniversitiesUpdateLogoUniversityPatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse>> {
    return apiUniversitiesUpdateLogoUniversityPatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateLogoUniversityPatch$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateLogoUniversityPatch$Plain(params?: ApiUniversitiesUpdateLogoUniversityPatch$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse> {
    return this.apiUniversitiesUpdateLogoUniversityPatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUniversitiesUpdateLogoUniversityPatch()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateLogoUniversityPatch$Response(params?: ApiUniversitiesUpdateLogoUniversityPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse>> {
    return apiUniversitiesUpdateLogoUniversityPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUniversitiesUpdateLogoUniversityPatch$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiUniversitiesUpdateLogoUniversityPatch(params?: ApiUniversitiesUpdateLogoUniversityPatch$Params, context?: HttpContext): Observable<EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse> {
    return this.apiUniversitiesUpdateLogoUniversityPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse>): EducationApplicationUseCasesUniversitiesUpdateOwnLogoUniversityCommandUpdateOwnLogoUniversityResponse => r.body)
    );
  }

}
