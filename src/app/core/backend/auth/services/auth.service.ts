/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAuthLoginPost } from '../fn/auth/api-auth-login-post';
import { ApiAuthLoginPost$Params } from '../fn/auth/api-auth-login-post';
import { apiAuthLoginPost$Plain } from '../fn/auth/api-auth-login-post-plain';
import { ApiAuthLoginPost$Plain$Params } from '../fn/auth/api-auth-login-post-plain';
import { apiAuthMicrosoftCallbackGet } from '../fn/auth/api-auth-microsoft-callback-get';
import { ApiAuthMicrosoftCallbackGet$Params } from '../fn/auth/api-auth-microsoft-callback-get';
import { apiAuthMicrosoftCallbackGet$Plain } from '../fn/auth/api-auth-microsoft-callback-get-plain';
import { ApiAuthMicrosoftCallbackGet$Plain$Params } from '../fn/auth/api-auth-microsoft-callback-get-plain';
import { apiAuthSigninMicrosoftGet } from '../fn/auth/api-auth-signin-microsoft-get';
import { ApiAuthSigninMicrosoftGet$Params } from '../fn/auth/api-auth-signin-microsoft-get';
import { LoginReponse as EducationApplicationUseCasesAuthLoginLoginReponse } from '../models/Education/Application/UseCases/Auth/Login/login-reponse';
import { LoginViaMicrosoftResponse as EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse } from '../models/Education/Application/UseCases/Auth/LoginViaMircosoftQuery/login-via-microsoft-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAuthLoginPost()` */
  static readonly ApiAuthLoginPostPath = '/api/Auth/Login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthLoginPost$Plain()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiAuthLoginPost$Plain$Response(params?: ApiAuthLoginPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesAuthLoginLoginReponse>> {
    return apiAuthLoginPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthLoginPost$Plain$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiAuthLoginPost$Plain(params?: ApiAuthLoginPost$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesAuthLoginLoginReponse> {
    return this.apiAuthLoginPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesAuthLoginLoginReponse>): EducationApplicationUseCasesAuthLoginLoginReponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiAuthLoginPost$Response(params?: ApiAuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesAuthLoginLoginReponse>> {
    return apiAuthLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiAuthLoginPost(params?: ApiAuthLoginPost$Params, context?: HttpContext): Observable<EducationApplicationUseCasesAuthLoginLoginReponse> {
    return this.apiAuthLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesAuthLoginLoginReponse>): EducationApplicationUseCasesAuthLoginLoginReponse => r.body)
    );
  }

  /** Path part for operation `apiAuthSigninMicrosoftGet()` */
  static readonly ApiAuthSigninMicrosoftGetPath = '/api/Auth/signin-microsoft';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthSigninMicrosoftGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthSigninMicrosoftGet$Response(params?: ApiAuthSigninMicrosoftGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiAuthSigninMicrosoftGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthSigninMicrosoftGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthSigninMicrosoftGet(params?: ApiAuthSigninMicrosoftGet$Params, context?: HttpContext): Observable<void> {
    return this.apiAuthSigninMicrosoftGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiAuthMicrosoftCallbackGet()` */
  static readonly ApiAuthMicrosoftCallbackGetPath = '/api/Auth/microsoft-callback';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthMicrosoftCallbackGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthMicrosoftCallbackGet$Plain$Response(params?: ApiAuthMicrosoftCallbackGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse>> {
    return apiAuthMicrosoftCallbackGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthMicrosoftCallbackGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthMicrosoftCallbackGet$Plain(params?: ApiAuthMicrosoftCallbackGet$Plain$Params, context?: HttpContext): Observable<EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse> {
    return this.apiAuthMicrosoftCallbackGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse>): EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthMicrosoftCallbackGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthMicrosoftCallbackGet$Response(params?: ApiAuthMicrosoftCallbackGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse>> {
    return apiAuthMicrosoftCallbackGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthMicrosoftCallbackGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthMicrosoftCallbackGet(params?: ApiAuthMicrosoftCallbackGet$Params, context?: HttpContext): Observable<EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse> {
    return this.apiAuthMicrosoftCallbackGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse>): EducationApplicationUseCasesAuthLoginViaMircosoftQueryLoginViaMicrosoftResponse => r.body)
    );
  }

}
